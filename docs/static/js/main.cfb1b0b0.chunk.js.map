{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","components/GiftGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","className","type","value","onChange","console","log","target","placeholder","GifGridItem","id","title","url","src","alt","getGifs","category","a","encodeURI","fetch","resp","json","data","gifs","map","img","images","downsized_medium","GiftGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","key","GifExpertApp","defaultCategories","categories","options","autoStart","loop","onInit","typewriter","typeString","start","ReactDOM","render","document","getElementById"],"mappings":"mPAIaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAERC,mBAAS,IAFD,mBAErCC,EAFqC,KAEzBC,EAFyB,KAoB5C,OACE,0BAAMC,SARc,SAACC,GACnBA,EAAEC,iBACCJ,EAAWK,OAAOC,OAAS,IAC1BR,GAAe,SAAAS,GAAI,OAAMP,GAAN,mBAAqBO,OACxCN,EAAc,OAKlB,wBAAIO,UAAU,2CAAd,gBAIA,2BACEA,UAAU,0CACVC,KAAK,OACLC,MAAOV,EACPW,SAzBsB,SAACR,GACxBS,QAAQC,IAAIV,EAAEW,OAAOJ,OACrBT,EAAcE,EAAEW,OAAOJ,OAEvBE,QAAQC,IAAI,8BAsBXE,YAAY,kBC/BTC,EAAc,SAAC,GAAmB,EAAlBC,GAAmB,IAAhBC,EAAe,EAAfA,MAAMC,EAAS,EAATA,IAElC,OACI,yBAAKX,UAAU,8CACZ,yBAAKY,IAAKD,EAAKE,IAAKH,IACpB,2BAAIA,K,uBCPFI,EAAO,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,6DAEbL,EAFa,iDAEmCM,UAAUF,GAF7C,+DAGAG,MAAMP,GAHN,cAGbQ,EAHa,gBAIEA,EAAKC,OAJP,uBAIZC,EAJY,EAIZA,KAEDC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHf,GAAKe,EAAIf,GACTC,MAAQc,EAAId,MACZC,IAAG,UAAGa,EAAIC,cAAP,aAAG,EAAYC,iBAAiBf,QAVxB,kBAcZW,GAdY,4CAAH,sDCMPK,EAAW,SAAC,GAAgB,IAAfZ,EAAc,EAAdA,SAAc,ECLZ,SAACA,GAAc,IAAD,EAEZxB,mBAAS,CAC/B8B,KAAO,GACPO,SAAS,IAJyB,mBAE/BC,EAF+B,KAExBC,EAFwB,KAuBtC,OAjBAC,qBAAU,WAENjB,EAAQC,GAAUiB,MAAK,SAAAC,GAIfH,EAAS,CACLT,KAAOY,EACPL,SAAS,SAKvB,CAACb,IAIIc,EDfyBK,CAAanB,GAAhCU,EAHuB,EAG7BJ,KAAcO,EAHe,EAGfA,QAOrB,OACG,oCACE,wBAAI5B,UAAU,yCAAyCe,GACtDa,GAAW,uBAAG5B,UAAU,oCAAb,gBAGZ,yBAAKA,UAAU,aAENyB,EAAOF,KAAI,SAAAC,GAAG,OACZ,kBAAC,EAAD,eACAW,IAAKX,EAAIf,IACLe,U,gBExBXY,EAAe,SAAC,GAA8B,IAAD,IAA5BC,yBAA4B,MAAR,GAAQ,IAGlB9C,mBAAS8C,GAHS,mBAG/CC,EAH+C,KAGnChD,EAHmC,KAMtD,OACE,yBAAKU,UAAU,aACb,kBAAC,IAAD,CACEuC,QAAS,CACPC,WAAW,EACXC,MAAM,GAERC,OAAQ,SAACC,GACPA,EAAWC,WAAW,mBAAmBC,WAI7C,kBAAC,EAAD,CAAavD,cAAeA,EAAegD,WAAYA,IACvD,wBAAItC,UAAU,4CAEd,4BACGsC,EAAWf,KAAI,SAACR,GAAD,OACd,kBAAC,EAAD,CAAUoB,IAAKpB,EAAUA,SAAUA,UCtB/C+B,IAASC,OAEL,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.cfb1b0b0.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport Proptypes from 'prop-types'\r\n\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n   \r\n\r\n      const handleInputChange = (e) => {\r\n         console.log(e.target.value);\r\n         setInputValue(e.target.value);\r\n\r\n         console.log('HandleInputChange llamado')\r\n         \r\n     }\r\n\r\n     const handleSubmit = (e) =>{\r\n        e.preventDefault();\r\n        if(inputValue.trim().length > 2){\r\n            setCategories( cats => [ inputValue, ...cats, ] );\r\n            setInputValue('');\r\n        }\r\n     }\r\n    return (\r\n      <form onSubmit={handleSubmit}>\r\n        <h2 className=\"animate__animated animate__bounceInDown\">\r\n          Add Category\r\n        </h2>\r\n\r\n        <input\r\n          className=\"animate__animated animate__bounceInDown\"\r\n          type=\"text\"\r\n          value={inputValue}\r\n          onChange={handleInputChange}\r\n          placeholder=\"Min 3 words\"\r\n        ></input>\r\n      </form>\r\n    );\r\n\r\n   \r\n}\r\n\r\nAddCategory.propTypes = {\r\n\r\n    setCategories : Proptypes.func.isRequired\r\n\r\n}\r\n\r\n\r\n\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\n\r\nexport const GifGridItem = ({id,title,url}) => {\r\n    \r\n    return (\r\n        <div className=\"card animate__animated animate__rubberBand\">\r\n           <img src={url} alt={title} ></img>\r\n           <p>{title}</p>\r\n           \r\n        </div>\r\n    )\r\n}\r\n\r\nGifGridItem.propTypes= {\r\n\r\n    id : PropTypes.string.isRequired,\r\n    title : PropTypes.string.isRequired,\r\n    url: PropTypes.string.isRequired\r\n}","\r\n\r\nexport const getGifs = async ( category) => {\r\n\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=15&api_key=RF7N4yJiAvcqG2DmGcPfk9lk1fJ45KW8`;\r\n    const resp = await fetch(url);\r\n    const {data} = await resp.json();\r\n\r\n    const gifs = data.map( img => {\r\n        return {\r\n            id : img.id,\r\n            title : img.title,\r\n            url : img.images?.downsized_medium.url\r\n        }\r\n    });\r\n  \r\n    return(gifs);\r\n\r\n   \r\n \r\n}\r\n","import React  from 'react';\r\nimport { GifGridItem } from './GifGridItem';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport PropTypes from 'prop-types';\r\n\r\n// import { getGifs } from '../Helpers/getGifs';\r\n\r\n\r\nexport const GiftGrid = ({category}) => {\r\n\r\n    // const [images, setImages] = useState([])\r\n    const {data: images ,loading} = useFetchGifs(category);\r\n  \r\n    // useEffect(() => {\r\n    //    getGifs(category).then( imgs => setImages(imgs))\r\n    // },[category])\r\n   \r\n\r\n    return (\r\n       <>\r\n         <h3 className=\"animate__animated animate__rubberBand\">{category}</h3>\r\n         {loading && <p className=\"animate__animated animate__flash\"> Loading ...</p>}\r\n\r\n        \r\n         <div className=\"card-grid\">  \r\n               {\r\n                  images.map(img =>(\r\n                    <GifGridItem \r\n                    key={img.id}\r\n                    {...img}/>\r\n                  )) \r\n               }     \r\n        </div>\r\n       </>\r\n        \r\n    )\r\n}\r\n\r\nGiftGrid.propTypes = {\r\n\r\n   category : PropTypes.string.isRequired\r\n}","import {useState, useEffect} from 'react'\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs = (category) => {\r\n   \r\n    const [state, setState] = useState({\r\n        data : [],\r\n        loading: true\r\n    });\r\n    useEffect(() => {\r\n\r\n        getGifs(category).then(imgs => {\r\n       \r\n          \r\n               \r\n                setState({\r\n                    data : imgs,\r\n                    loading: false\r\n                })\r\n           \r\n        });\r\n\r\n    },[category])\r\n\r\n    \r\n\r\n    return state;\r\n}\r\n\r\n\r\n","import React, {useState} from 'react'\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GiftGrid } from './components/GiftGrid';\r\nimport Typewriter from \"typewriter-effect\";\r\n\r\nexport const GifExpertApp = ({defaultCategories = []}) => {\r\n     \r\n   \r\n    const [categories, setCategories] = useState(defaultCategories);\r\n   \r\n    \r\n    return (\r\n      <div className=\"container\">\r\n        <Typewriter\r\n          options={{\r\n            autoStart: true,\r\n            loop: true,\r\n          }}\r\n          onInit={(typewriter) => {\r\n            typewriter.typeString(\"Gif Expert App \").start();\r\n          }}\r\n        />\r\n\r\n        <AddCategory setCategories={setCategories} categories={categories} />\r\n        <hr className=\"animate__animated animate__bounceInDown\" />\r\n\r\n        <ol>\r\n          {categories.map((category) => (\r\n            <GiftGrid key={category} category={category} />\r\n          ))}\r\n        </ol>\r\n      </div>\r\n    );\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { GifExpertApp } from './GifExpertApp';\n\n\nReactDOM.render(\n  \n    <GifExpertApp />,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\n"],"sourceRoot":""}